{"version":3,"sources":["../../../src/dragon/router/route.js"],"names":[],"mappings":"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","file":"route.js","sourcesContent":["'use strict'\n\nvar escapeRegExp   = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g,\n    optionalRegExp = /\\((.*?)\\)/g,\n    paramRegExp    = /(?::|\\*)(\\w+)/g\n\n/**\n * Route Class\n *\n * @public\n * @class Route\n */\nclass Route {\n\n  constructor(pattern, Controller, action, options) {\n\n    this.action     = action\n    this.Controller = Controller\n    this.options    = options\n    this.pattern    = pattern\n\n    this.allParams      = []\n    this.requiredParams = []\n    this.optionalParams = []\n\n    this.createRegExp()\n\n  }\n\n  createRegExp() {\n\n    var pattern = this.pattern\n\n    pattern = pattern.replace(escapeRegExp, '\\\\$&')\n\n    this.replaceParams(pattern, (match, param) => {\n\n      return this.allParams.push(param)\n\n    })\n\n    pattern = pattern.replace(optionalRegExp, this.parseOptionalPortion)\n\n    pattern = this.replaceParams(pattern, (match, param) => {\n\n      this.requiredParams.push(param)\n      return this.paramCapturePattern(match)\n\n    })\n\n    return this.regExp = new RegExp(`^${pattern}(?=\\\\/*(?=\\\\?|$))`)\n\n  }\n\n  extractParams(path) {\n\n    var params  = {},\n        matches = this.regExp.exec(path)\n\n    var ref = matches.slice(1)\n\n    for (var i, index = i = 0, len = ref.length; i < len; index = ++i) {\n      var match     = ref[index]\n      var paramName = this.allParams.length ? this.allParams[index] : index\n      params[paramName] = match\n    }\n\n    return params\n\n  }\n\n  normalizeParams(params) {\n\n    if(params instanceof Array) {\n\n      if(params.length < this.requiredParams.length) return false\n\n      var paramsHash = {}\n\n      for (var paramIndex = i = 0, len = this.requiredParams.length; i < len; paramIndex = ++i) {\n\n        var paramName = this.requiredParams[paramIndex]\n\n        paramsHash[paramName] = params[paramIndex]\n\n      }\n\n      if(!this.testConstraints(paramsHash)) return false\n\n      params = paramsHash\n\n    }\n\n    else {\n\n      params = params || {}\n\n      if(!this.testParams(params)) return false\n\n    }\n\n    return params\n\n  }\n\n  paramCapturePattern(param) {\n\n    if(param.charAt(0) == ':') {\n      return '([^\\/\\?]+)'\n    }\n\n    else {\n      return '(.*?)'\n    }\n\n  }\n\n  parseOptionalPortion(match, optionalPortion) {\n\n    var portion = this.replaceParams(optionalPortion, (match, param) => {\n\n      this.optionalParams.push(param)\n\n      return this.paramCapturePattern(match)\n\n    })\n\n    return `(?:${portion})?`\n\n  }\n\n  removeTrailingSlash(path) {\n\n    if (path.slice(-1) === '/') {\n      path.slice(0, -1);\n    }\n\n    return path\n\n  }\n\n  replaceParams(s, cb) {\n\n    return s.replace(paramRegExp, cb)\n\n  }\n\n  test(path) {\n\n    if(!this.regExp.test(path)) return false\n\n    if(this.options.constraints) {\n      return this.testConstraints(this.extractParams(path))\n    }\n\n    return true\n\n  }\n\n  testConstraints() {\n\n    var constraints = this.options.constraints\n\n    if(constraints) {\n\n      for(var name in constraints) {\n\n        if(!{}.hasOwnProperty.call(constraints, name)) continue\n\n        constraint = constraints[name]\n\n        if(!constraint.test(params[name])) {\n\n          return false\n\n        }\n      }\n\n    }\n\n    return true\n\n  }\n\n  testParams(params) {\n\n    for(var i = 0, len = this.requiredParams.length; i < len; i++) {\n\n      paramName = this.requiredParams[i]\n\n      if(params[paramName] === void 0) {\n        return false\n      }\n\n    }\n\n    return this.testConstraints(params)\n\n  }\n\n}\n\nexport default Route\n"]}