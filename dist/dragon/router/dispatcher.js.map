{"version":3,"sources":["../../../src/dragon/router/dispatcher.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBM,U;AAEJ,WAFI,UAEJ,GAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA,wCAFtB,UAEsB;;;AAExB,SAAK,GAAL,GAAW,gBAAM,QAAN,CAAe,IAAf,CAAX;;AAEA,SAAK,QAAL,GAAgB,KAAhB;;AAEA,SAAK,OAAL,GAAe,OAAf;;AAEA,SAAK,GAAL,GAAW,QAAQ,GAAnB;;AAEA,SAAK,iBAAL,GAAyB,IAAzB;AAED;;6BAdG,U;;6BAgBK,K,EAAO,M,EAAsB;AAAA,UAAd,OAAc,yDAAJ,EAAI;;;AAEpC,UAAG,KAAK,iBAAL,IAA0B,KAAK,iBAAL,CAAuB,OAApD,EAA6D;;AAE3D,aAAK,iBAAL,CAAuB,OAAvB;AACD;;AAED,UAAI,MAAM;AACR,gBAAQ;AADA,OAAV;;AAIA,UAAI,MAAM;AACR,kBAAU,gBAAO;AADT,OAAV;;AAIA,UAAI,aAAa,IAAjB;;AAEA,UAAG,QAAQ,UAAX,EAAuB;AACrB,qBAAa,IAAI,QAAQ,UAAZ,EAAb;AACA,mBAAW,QAAQ,MAAnB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,KAAK,IAA1C;AACD,OAHD,MAKK;AACH,YAAI,OAAO,MAAM,OAAN,CAAc,KAAd,CAAoB,GAApB,CAAX;;AAEA,YAAI,iBAAiB,KAAK,CAAL,CAArB;YACI,aAAiB,QAAQ,MAAR,IAAkB,KAAK,CAAL,CADvC;;AAGA,YAAI,aAAa,KAAK,OAAL,CAAa,aAAb,CAA2B,cAA3B,CAAjB;AACA,qBAAa,IAAI,UAAJ,EAAb;;AAEA,mBAAW,UAAX,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,KAAK,IAAtC;AACD;;AAED,WAAK,iBAAL,GAAyB,UAAzB;AAED;;;2BAEM,CAEN;;;8BAES;;AAER,UAAG,CAAC,KAAK,QAAT,EAAmB;;AAEjB,wBAAM,OAAN,CAAc,IAAd,EAAoB;AAClB,4BAAkB,CAAC,KAAD;AADA,SAApB;AAID;AAEF;;SApEG,U;;;kBAwES,U","file":"dispatcher.js","sourcesContent":["'use strict'\n\n/**\n * Module Dependencies\n *\n * @ignore\n */\nimport Router from './index'\nimport utils  from '../utils'\n\n/**\n * Dispatcher Class\n *\n * @public\n * @class Dispatcher\n */\nclass Dispatcher {\n\n  constructor(options = {}) {\n\n    this.uid = utils.uniqueId(this)\n\n    this.disposed = false\n\n    this.options = options\n\n    this.app = options.app\n\n    this.currentController = null\n\n  }\n\n  dispatch(route, params, options = {}) {\n\n    if(this.currentController && this.currentController.dispose) {\n\n      this.currentController.dispose()\n    }\n\n    var req = {\n      params: params\n    }\n\n    var res = {\n      navigate: Router.navigate\n    }\n\n    var controller = null\n\n    if(options.Controller) {\n      controller = new options.Controller()\n      controller[options.action](req, res, this.next)\n    }\n\n    else {\n      var segs = route.pattern.split('/')\n\n      var controllerName = segs[1],\n          actionName     = options.action || segs[2]\n\n      var Controller = this.options.getController(controllerName)\n      controller = new Controller()\n\n      controller[actionName](req, res, this.next)\n    }\n\n    this.currentController = controller\n\n  }\n\n  next() {\n\n  }\n\n  dispose() {\n\n    if(!this.disposed) {\n\n      utils.dispose(this, {\n        ignoreProperties: ['app']\n      })\n\n    }\n\n  }\n\n}\n\nexport default Dispatcher\n"]}