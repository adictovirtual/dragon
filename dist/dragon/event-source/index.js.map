{"version":3,"sources":["../../../src/dragon/event-source/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUM,mB;;;;;;;;;;AASJ,WATI,mBASJ,GAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA,wCATtB,mBASsB;;AACxB,QAAG,CAAC,QAAQ,IAAT,IAAiB,OAAO,QAAQ,IAAf,IAAuB,QAA3C,EAAqD,MAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;;AAErD,SAAK,MAAL,GAAc,IAAI,WAAJ,CAAgB,QAAQ,IAAxB,CAAd;;;AAGA,QAAI,eAAe,sBAAnB;;AAEA,SAAK,IAAL,GAAa,aAAa,SAAb,CAAuB,IAAvB,CAA4B,YAA5B,CAAb;AACA,SAAK,EAAL,GAAa,aAAa,WAAb,CAAyB,IAAzB,CAA8B,YAA9B,CAAb;AACA,SAAK,IAAL,GAAa,aAAa,eAAb,CAA6B,IAA7B,CAAkC,YAAlC,CAAb;AACA,SAAK,GAAL,GAAa,aAAa,cAAb,CAA4B,IAA5B,CAAiC,YAAjC,CAAb;;AAEA,SAAK,MAAL,CAAY,gBAAZ,CAA6B,SAA7B,EAAwC,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAxC,EAAmE,KAAnE;AACA,SAAK,MAAL,CAAY,gBAAZ,CAA6B,MAA7B,EAAqC,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAArC,EAA6D,KAA7D;AACA,SAAK,MAAL,CAAY,gBAAZ,CAA6B,OAA7B,EAAsC,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAtC,EAA+D,KAA/D;AACD;;6BAzBG,mB;;8BA2BM;;AAER,UAAG,CAAC,KAAK,QAAT,EAAmB;AACjB,aAAK,MAAL,CAAY,mBAAZ,CAAgC,SAAhC,EAA2C,KAAK,SAAhD,EAA2D,KAA3D;AACA,aAAK,MAAL,CAAY,mBAAZ,CAAgC,MAAhC,EAAwC,KAAK,MAA7C,EAAqD,KAArD;AACA,aAAK,MAAL,CAAY,mBAAZ,CAAgC,OAAhC,EAAyC,KAAK,OAA9C,EAAuD,KAAvD;;AAEA,wBAAM,OAAN,CAAc,IAAd;AAED;AAEF;;;4BAEO,C,EAAG;AACT,WAAK,IAAL,CAAU,OAAV,EAAmB,CAAnB;AACD;;;8BAES,C,EAAG;AACX,WAAK,IAAL,CAAU,SAAV,EAAqB,CAArB;AACD;;;2BAEM,C,EAAG;AACR,WAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB;AACD;;SAlDG,mB;;;AAsDN,sBAAc,oBAAoB,SAAlC,EAA6C,EAAC,sBAAD,EAA7C;;kBAEe,mB","file":"index.js","sourcesContent":["import EventEmitter from '../events'\nimport mixin        from '../mixin'\nimport utils        from '../utils'\n\n/**\n * EventSourceMediator Class\n *\n * @public\n * @class EventSourceMediator\n */\nclass EventSourceMediator {\n\n  /**\n   * EventSourceMediator constructor\n   *\n   * @public\n   * @constructor\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    if(!options.path || typeof options.path != 'string') throw new Error('Path must be set to use Event Source')\n\n    this.source = new EventSource(options.path)\n\n    // TODO: figure out how to mixin this\n    var eventEmitter = new EventEmitter()\n\n    this.emit  = eventEmitter.emitEvent.bind(eventEmitter)\n    this.on    = eventEmitter.addListener.bind(eventEmitter)\n    this.once  = eventEmitter.addOnceListener.bind(eventEmitter)\n    this.off   = eventEmitter.removeListener.bind(eventEmitter)\n\n    this.source.addEventListener('message', this.onMessage.bind(this), false)\n    this.source.addEventListener('open', this.onOpen.bind(this), false)\n    this.source.addEventListener('error', this.onClose.bind(this), false)\n  }\n\n  dispose() {\n\n    if(!this.disposed) {\n      this.source.removeEventListener('message', this.onMessage, false)\n      this.source.removeEventListener('open', this.onOpen, false)\n      this.source.removeEventListener('error', this.onClose, false)\n\n      utils.dispose(this)\n\n    }\n\n  }\n\n  onClose(e) {\n    this.emit('close', e)\n  }\n\n  onMessage(e) {\n    this.emit('message', e)\n  }\n\n  onOpen(e) {\n    this.emit('open', e)\n  }\n\n}\n\nObject.assign(EventSourceMediator.prototype, {mixin})\n\nexport default EventSourceMediator\n"]}